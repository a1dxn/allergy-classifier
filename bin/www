#!/usr/bin/env node
const _ = require("lodash")
	  ,LogRocket = require('logrocket');
LogRocket.init('2t1hft/allergyfamilyio');

/*** Environment Variables & Defaults***/
process.env.API_ENDPOINT    = process.env.API_ENDPOINT ?? "/api";
process.env.API_LOCAL       = process.env.API_LOCAL ?? (process.env?.API_ENDPOINT==null || process.env?.API_ENDPOINT==="/api");
process.env.APIM_PUBLIC_KEY = process.env.APIM_PUBLIC_KEY ?? "";
process.env.PORT            = process.env.PORT ?? 3000;
process.env.LOG_LEVEL       = process.env.LOG_LEVEL ?? "debug";
process.env.LOG_TIME        = "abs";
require("log-node")();

/*** Global Variables ***/
/*Logging*/
global._log = require("log");
/*Constants*/
global.CONSTANT = require("../services/constant-manager");
/*Date Utilities*/
global.dateUtils = require("date-and-time");
dateUtils.plugin(require("date-and-time/plugin/ordinal"));
/*lodash*/
global._ = _;
/*Schema Validation (Joi)*/
global.Schema = require("../services/schema-manager");

/*** HTTP Server ***/
_log.get("http").notice("Initialising HTTP Server");
const app  = require("../app");
const port = parseInt(process.env.PORT);
app.set("port", port);

const server = require("http").createServer(app);
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/*** Event Listeners for HTTP Server ***/
function onListening() {
	const addr = server.address();
	const bind = typeof addr==="string" ? "pipe "+addr : "port "+addr.port;
	_log.get("http").notice("Listening on %s", bind);
}

function onError(error) {
	if(error.syscall!=="listen") {
		throw error;
	}

	let bind = typeof port==="string" ? "Pipe "+port : "Port "+port;

	// handle specific listen errors with friendly messages
	switch(error.code) {
		case "EACCES":
			console.error(bind+" requires elevated privileges");
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(bind+" is already in use");
			process.exit(1);
			break;
		default:
			throw error;
	}
}
